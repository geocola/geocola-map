/* jshint esnext:true */
import can from 'can/util/library';
import CanMap from 'can/map/';
import 'can/map/define/';
import CanEvent from 'can/event/';
import Component from 'can/component/';
import template from './template.stache!';
import 'bootstrap';
let id = 0;

function getId() {
  return id++;
}

/**
 * @constructor modal-container.ViewModel ViewModel
 * @parent modal-container
 * @group modal-container.ViewModel.props Properties
 *
 * @description A `<modal-container />` component's ViewModel
 */
export let ViewModel = CanMap.extend({
  /**
   * @prototype
   */
  define: {
    /**
     * The title to display in the modal dialog
     * @property {String} modal-container.ViewModel.props.title
     * @parent modal-container.ViewModel.props
     */
    title: {
      type: 'string',
      value: 'Dialog'
    },
    /**
     * Whether or not the container is visible by default
     * @property {Boolean} modal-container.ViewModel.props.visible
     * @parent modal-container.ViewModel.props
     */
    visible: {
      type: 'boolean',
      value: true,
      set: function(visible) {
        let dummy = visible ? this.show() : this.hide();
        return visible;
      }
    },
    /**
     * Backdrop option.
     * @property {Boolean | String<'static'>} modal-container.ViewModel.props.backdrop
     * @parent modal-container.ViewModel.props
     */
    backdrop: {
      value: 'static',
      type: 'string'
    },
    /**
     * A unique id for this modal. The default value is modal-<number>
     * @property {String} modal-container.ViewModel.props.instanceId
     * @parent modal-container.ViewModel.props
     */
    instanceId: {
      type: 'string',
      value() {
        return 'modal-' + getId();
      }
    }
  },
  /**
   * shows the modal and dispatches the `show` event
   */
  show: function() {
    can.$('#' + this.attr('instanceId')).modal('show');
    this.dispatch('show');
  },
  /**
   * hides the modal and dispatches the `hide` event
   */
  hide: function() {
    can.$('#' + this.attr('instanceId')).modal('hide');
    this.dispatch('hide');
  }
});

can.extend(ViewModel.prototype, CanEvent);

export let ModalContainer = Component.extend({
  tag: 'modal-container',
  template: template,
  viewModel: ViewModel,
  events: {
    inserted: function() {
      if (this.viewModel.attr('visible')) {
        this.viewModel.show();
      }
    }
  }
});
